from random import randrange

class MPrimes:
    def __init__(self, n_bin_digits, small_primes_lim):
        self.n_bin_digits = n_bin_digits
        self.small_primes = self.gen_small_primes(small_primes_lim)

    def gen_small_primes(self, lim):
        prime = [True] * lim
        for n in range(2, lim):
            if prime[n]:
                yield n  # n is a prime
                for c in range(n * n, lim, n):
                    prime[c] = False  # mark composites

    def run_test(self):
        self.it_x(self.n_bin_digits)

    def it_x(self, n_bin_digits):
        x = 1
        for power in range(1, n_bin_digits):
            x <<= 1
            out = self.probably_prime(x-1, 40)
            if out:
                equation = f'(2**{power})-1'
                print('MP: ', equation, 'digits: ', len(str(x-1)))
                self.is_sophie_germaine_prime(x-1, equation)
        return

    def is_sophie_germaine_prime(self, prime, base):
        if self.probably_prime((2*prime)+1, 50):
            equation = f'({base}*2)+1'
            print('SGP: ', equation)

    def probably_prime(self, n, k):
        """Return True if n passes k rounds of the Miller-Rabin primality
        test (and is probably prime). Return False if n is proved to be
        composite.

        """
        if n < 2: return False
        for p in self.small_primes:
            if n < p * p: return True
            if n % p == 0: return False
        r, s = 0, n - 1
        while s % 2 == 0:
            r += 1
            s //= 2
        for _ in range(k):
            a = randrange(2, n - 1)
            x = pow(a, s, n)
            if x == 1 or x == n - 1:
                continue
            for _ in range(r - 1):
                x = pow(x, 2, n)
                if x == n - 1:
                    break
            else:
                return False
        return True

mp_test = MPrimes(3000, 100)
mp_test.run_test()
